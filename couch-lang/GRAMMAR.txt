
toplevel -> statement:*

block -> "{" statement:* "}"

statement ->
    | function
    | return ";"
    | while
    | break ";"
    | continue ";"
    | let ";"
    | assignment ";"

function -> "fn" Identifier "(" function_parameters ")" block

function_parameters -> (parameter ("," parameter):* ",":?):?

parameter -> "mut":? Identifier

return -> "return" expression:?

while -> "while" expression block

break -> "break"

continue -> "continue"

let -> "let" parameter "=" expression

assignment ->
    | expression "=" expression
    | expression "+=" expression
    | expression "-=" expression
    | expression "*=" expression
    | expression "/=" expression
    | expression

expression -> equality

equality ->
    | add_subtract "==" equality
    | add_subtract "!=" equality
    | add_subtract

add_subtract ->
    | multiply_divide_modulo "+" add_subtract
    | multiply_divide_modulo "-" add_subtract
    | multiply_divide_modulo

multiply_divide_modulo ->
    | unary "*" multiply_divide_modulo
    | unary "/" multiply_divide_modulo
    | unary "%" multiply_divide_modulo
    | unary

unary ->
    | "!" unary
    | "-" unary
    | member_index_call

member_index_call
    | grouping "." Identifier
    | grouping "[" expression "]"
    | grouping "(" call_arguments ")"
    | grouping

call_arguments ->
    (expression ("," expression):* ",":?):?

grouping ->
    | "(" expression ")"
    | operand

operand ->
    | Identifier
    | Int
    | Float
    | String
    | bool
    | if

bool -> "false" | "true" 

if -> "if" expression block ("else" block):?

whitespace -> /[ \n]+/
Identifier -> /[a-zA-Z_][a-zA-Z_0-9_]*/
Integer -> /0|([1-9][0-9]+)/
Float -> /(0|([1-9][0-9]+))\.[0-9]+/
String -> /"<escapeable string char>*"/


